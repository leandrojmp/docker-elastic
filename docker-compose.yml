---
services:
  certs:
    image: ubuntu:24.04
    container_name: certs
    volumes:
      - ./certs:/usr/share/certs:z
    command: >
      bash -c '
        cd /usr/share/certs;
        if [ -f certs.exist ]; then
          echo "certificados já criados"
          exit 0;
        fi;
        apt update && apt install -y openssl;
        # cria ca
        openssl genrsa -out ca-siem-key.pem 4096
        openssl req -new -x509 -sha256 -key ca-siem-key.pem -subj "/CN=DOCKER ELASTIC SELF-SIGNED CA" -out ca-siem.pem -days 365
        # elasticsearch
        openssl genrsa -out siem-key.tmp 4096
        openssl pkcs8 -inform PEM -outform PEM -in siem-key.tmp -topk8 -nocrypt -v1 PBE-SHA1-3DES -out siem-key.pem
        openssl req -new -key siem-key.pem -subj "/C=BR/ST=RJ/L=RIO DE JANEIRO/O=DOCKER ELASTIC/CN=SIEM" -out siem.csr
        echo "subjectAltName=DNS:elasticsearch, DNS:kibana, DNS:fleet, DNS:localhost" > siem.ext
        openssl x509 -req -in siem.csr -CA ca-siem.pem -CAkey ca-siem-key.pem -CAcreateserial -sha256 -out siem.pem -days 365 -extfile siem.ext
        cat siem.pem ca-siem.pem > siem.chain.pem
        chmod 640 *.pem
        rm -f *.ext
        rm -f *.tmp
        rm -f *.csr
        rm -f *.srl
        touch certs.exist
      '
    networks:
      - siem
  
  elasticsearch:
    depends_on:
      certs:
        condition: service_completed_successfully
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: elasticsearch
    volumes:
      - ./certs:/usr/share/elasticsearch/config/certs:z
      - elasticsearch:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=elasticsearch
      - cluster.name=${CLUSTER_NAME}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/siem-key.pem
      - xpack.security.http.ssl.certificate=certs/siem.chain.pem
      - xpack.security.http.ssl.certificate_authorities=certs/ca-siem.pem
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/siem-key.pem
      - xpack.security.transport.ssl.certificate=certs/siem.pem
      - xpack.security.transport.ssl.certificate_authorities=certs/ca-siem.pem
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2gb
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca-siem.pem https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - siem

  setup_kibana:
    depends_on: 
      elasticsearch:
        condition: service_healthy
    image: ubuntu:24.04
    container_name: setup_kibana
    volumes:
      - ./certs:/usr/share/certs:z
    command: >
      bash -c '
        cd /usr/share/certs;
        if [ -f kibana_user.exist ]; then
          echo "kibana_system já criado"
          exit 0;
        fi;
        apt update && apt install -y curl;
        # cria ca
        echo "configura password kibana_sytem";
        curl -s -X POST --cacert /usr/share/certs/ca-siem.pem -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}";
        echo "password configurado";
        touch kibana_user.exist
      '
    networks:
      - siem

  kibana:
    depends_on: 
      setup_kibana:
        condition: service_completed_successfully
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    container_name: kibana
    volumes:
      - ./certs:/usr/share/kibana/config/certs:z
      - kibana:/usr/share/kibana/data
      - ./kibana.yml:/usr/share/kibana/config/kibana.yml:Z
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVER_NAME=kibana
      - ELASTICSEARCH_HOSTS=https://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=/usr/share/kibana/config/certs/ca-siem.pem
      - SERVER_SSL_ENABLED=true
      - SERVER_SSL_CERTIFICATE=/usr/share/kibana/config/certs/siem.pem
      - SERVER_SSL_KEY=/usr/share/kibana/config/certs/siem-key.pem
      - SERVER_SSL_CERTIFICATEAUTHORITIES=/usr/share/kibana/config/certs/ca-siem.pem
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -I -s --cacert config/certs/ca-siem.pem https://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - siem

  setup_fleet:
    depends_on: 
      kibana:
        condition: service_healthy
    image: ubuntu:24.04
    container_name: setup_fleet
    volumes:
      - ./certs:/usr/share/certs:z
    command: >
      bash -c '
        cd /usr/share/certs;
        if [ -f fleet_setup.exist ]; then
          echo "fleet host e output já configurado"
          exit 0;
        fi;
        apt update && apt install -y openssl curl coreutils grep sed;
        # configura fleet host e output
        echo "configura fleet host";
        curl -k -X POST -u elastic:${ELASTIC_PASSWORD} -H "accept: application/json" -H "Content-Type: application/json" -H "kbn-xsrf: true" https://kibana:5601/api/fleet/fleet_server_hosts -d "{\"id\": \"fleet-default-host\",\"name\": \"fleet-server\", \"is_default\": true, \"is_internal\": false, \"host_urls\": [ \"https://fleet:8220\"]}";
        echo "fleet host configurado";
        echo "configura default output";
        curl -k -X PUT -u elastic:${ELASTIC_PASSWORD} -H "accept: application/json" -H "Content-Type: application/json" -H "kbn-xsrf: true" https://kibana:5601/api/fleet/outputs/fleet-default-output -d "{\"hosts\": [ \"https://elasticsearch:9200\"], \"ca_trusted_fingerprint\": \"$(openssl x509 -fingerprint -noout -sha256 -in /usr/share/certs/ca-siem.pem | cut -d "=" -f 2 | tr -d : )\", \"config_yaml\": \"ssl.verification_mode: certificate\"}";
        echo "default output configurado"
        touch fleet_setup.exist
      '
    networks:
      - siem

  fleet:
      depends_on:
        setup_fleet:
          condition: service_completed_successfully
        kibana:
          condition: service_healthy
        elasticsearch:
          condition: service_healthy
      image: docker.elastic.co/beats/elastic-agent:${STACK_VERSION}
      container_name: fleet
      hostname: fleet-server
      volumes:
        - ./certs:/certs:z
        - fleet:/usr/share/elastic-agent/state
        - /var/run/docker.sock:/var/run/docker.sock:ro
        - /docker/containers:/var/lib/docker/containers:ro
      ports:
        - ${FLEET_PORT}:8220
      restart: always
      user: root
      environment:
        - FLEET_ENROLL=1
        - FLEET_SERVER_POLICY_ID=fleet-server-policy
        - FLEET_SERVER_ENABLE=1
        - KIBANA_FLEET_SETUP=1
        - KIBANA_HOST=https://kibana:5601
        - FLEET_URL=https://fleet:8220
        - FLEET_SERVER_ELASTICSEARCH_HOST=https://elasticsearch:9200
        - FLEET_CA=/certs/ca-siem.pem
        - KIBANA_FLEET_USERNAME=elastic
        - KIBANA_FLEET_PASSWORD=${ELASTIC_PASSWORD}
        - FLEET_SERVER_CERT=/certs/siem.pem
        - FLEET_SERVER_CERT_KEY=/certs/siem-key.pem
        - FLEET_SERVER_ELASTICSEARCH_CA=/certs/ca-siem.pem
        - KIBANA_FLEET_CA=/certs/ca-siem.pem
      networks:
        - siem

        
networks:
  siem:
    driver: bridge

volumes:
  elasticsearch:
    driver: local
  kibana:
    driver: local
  fleet:
    driver: local
